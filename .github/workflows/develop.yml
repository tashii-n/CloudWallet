name: DEV CI/CD Workflow

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        run: |
          cat /etc/os-release
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ap-southeast-1
          sudo apt-get remove docker docker-engine docker.io containerd runc          
          aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com
      
      - name: Get runner IP address
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Print Runner IP Address
        id: print-ip
        run: |
         echo "Runner IP Address: ${{ steps.ip.outputs.ipv4 }}"

      - name: Whitelist runner IP address
        run: |
         aws ec2 authorize-security-group-ingress \
         --group-id ${{ secrets.DEV_INSTANCE_SG_ID }} \
         --protocol tcp \
         --port 22 \
         --cidr ${{ steps.ip.outputs.ipv4 }}/32   
         
      - name: Create .env file
        run: |
         echo "NEXT_PUBLIC_AUTH_BASE_API_URL=${{ secrets.NEXT_PUBLIC_AUTH_BASE_API_URL }}" > .env
         echo "NEXT_PUBLIC_IDENTIFIER=${{ secrets.NEXT_PUBLIC_IDENTIFIER }}" >> .env
         echo "NEXT_PUBLIC_ENV=${{ secrets.NEXT_PUBLIC_ENV }}" >> .env
         echo "NEXT_PUBLIC_ENCRYPTION_KEY=${{ secrets.NEXT_PUBLIC_ENCRYPTION_KEY }}" >> .env
         echo "NEXT_PUBLIC_BASE_API_URL=${{ secrets.NEXT_PUBLIC_BASE_API_URL }}" >> .env
    
      - name: Copy Docker Compose file to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.DEV_INSTANCE_IP }}
          username: ${{ secrets.DEV_INSTANCE_USERNAME }}
          key: ${{ secrets.DEV_INSTANCE_PRIVATE_KEY }}
          passphrase: ${{ secrets.EC2_INSTANCE_PASSPHRASE }}
          source: docker-compose.yml
          target: /home/${{ secrets.DEV_INSTANCE_USERNAME }}/workspace/ndi-cloud-wallet-frontend/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Build and tag Docker image
        run: |
          docker build --platform=linux/arm64/v8 --no-cache -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/qacloudwalletservice:frontend .
          docker images
          ls -al
          cat .env

      - name: Push Docker image to AWS ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/qacloudwalletservice:frontend

      
  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build

    steps:

      - name: SSH into EC2 instance and deploy Docker image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_INSTANCE_IP }}
          username: ${{ secrets.DEV_INSTANCE_USERNAME }}
          key: ${{ secrets.DEV_INSTANCE_PRIVATE_KEY }}
          passphrase: ${{ secrets.EC2_INSTANCE_PASSPHRASE }}
          script: |
            cd /home/${{ secrets.DEV_INSTANCE_USERNAME }}/workspace/ndi-cloud-wallet-frontend
            # Check if the container exists
            aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 589943763826.dkr.ecr.ap-southeast-1.amazonaws.com
            docker-compose pull ndi-cloud-wallet-frontend
            docker-compose up -d ndi-cloud-wallet-frontend
             # Remove dangling images (if any)
            if [ -n "$(docker images -f 'dangling=true' -q)" ]; then
            docker rmi $(docker images -f "dangling=true" -q) || true  # Ignore errors if images are in use
            fi
